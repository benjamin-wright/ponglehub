FROM ../../libraries/images/golang+image

deps:
  COPY go.mod go.sum ./
  COPY ../db-init+module/ ../db-init

  RUN go mod download

  COPY internal ./internal
  COPY cmd ./cmd

build:
  FROM +deps

  ARG APPLICATION_NAME

  RUN --mount=type=cache,target=/root/.cache CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ${APPLICATION_NAME} ./cmd/${APPLICATION_NAME}/${APPLICATION_NAME}.go

  SAVE ARTIFACT ${APPLICATION_NAME}

docker:
  FROM scratch

  ARG APPLICATION_NAME

  COPY --build-arg APPLICATION_NAME="$APPLICATION_NAME" +build/${APPLICATION_NAME} /go/bin/app
  ENTRYPOINT [ "/go/bin/app" ]

  SAVE IMAGE auth-server/${APPLICATION_NAME}

migrations:
  FROM scratch

  COPY --dir migrations /migrations
  COPY --build-arg APPLICATION_NAME="migrations" +build/migrations /go/bin/app
  ENTRYPOINT [ "/go/bin/app" ]

  SAVE IMAGE auth-server/migrations

all:
  BUILD --build-arg APPLICATION_NAME=login +docker
  BUILD --build-arg APPLICATION_NAME=users-delete +docker
  BUILD --build-arg APPLICATION_NAME=users-get +docker
  BUILD --build-arg APPLICATION_NAME=users-list +docker
  BUILD --build-arg APPLICATION_NAME=users-post +docker
  BUILD --build-arg APPLICATION_NAME=users-put +docker
  BUILD +migrations

test:
  FROM +deps
  COPY docker-compose.yaml docker-compose.yaml
  COPY migrations migrations

  WITH DOCKER --compose docker-compose.yaml
    RUN CGO_ENABLED=0 \
      GOOS=linux \
      GOARCH=amd64 \
      DB_HOST=localhost \
      DB_USER=root \
      go test ./cmd/...
  END
