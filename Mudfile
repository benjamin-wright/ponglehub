ENV CLUSTER_NAME=pongle
ENV REGISTRY_NAME=pongle-registry.localhost
ENV REGISTRY_PORT=5000
ENV NPM_CONTAINER=pongle-npm
ENV NPM_PORT=4873
ENV NPM_USERNAME=admin
ENV NPM_PASSWORD=djsafnAJFNsaFNJSADNfkjsA

ARTEFACT npm
  CONDITION ! docker ps --format '{{ .Names }}' | grep -q $NPM_CONTAINER
  
  STEP deploy
    COMMAND docker run -d --restart always -p $NPM_PORT:4873 --name $NPM_CONTAINER verdaccio/verdaccio:4 2>&1

  STEP login
    WAIT FOR npm ping --registry http://localhost:$NPM_PORT
    COMMAND
      TOKEN=$(curl -s \
        -H "Accept: application/json" \
        -H "Content-Type:application/json" \
        -X PUT --data "{\"name\": \"$NPM_USERNAME\", \"password\": \"$NPM_PASSWORD\"}" \
        http://localhost:$NPM_PORT/-/user/org.couchdb.user:$NPM_USERNAME 2>&1 | jq '.token' -r)
      
      if [[ "$TOKEN" == "null" ]]; then
        echo "failed to get npm token, try restarting"
        exit 1
      fi

      npm set @pongle:registry "http://localhost:$NPM_PORT"
      npm set //localhost:$NPM_PORT/:_authToken $TOKEN

ARTEFACT npm-stop
  CONDITION docker ps --format '{{ .Names }}' | grep -q $NPM_CONTAINER
  
  STEP stop-container
    COMMAND docker stop $NPM_CONTAINER 2>&1
  
  STEP remove-container
    COMMAND docker rm $NPM_CONTAINER 2>&1
  
  STEP clear-npmrc
    COMMAND
      npm config delete @pongle:registry
      npm config delete //localhost:$NPM_PORT/:_authToken
  
  STEP clear-docker
    COMMAND docker system prune --all --volumes --force

  STEP clear-checksums
    COMMAND find . -name '.last-checksum' -delete

ARTEFACT raw-cluster
  STEP registry
    CONDITION ! k3d registry list | grep -w k3d-$REGISTRY_NAME 
    COMMAND k3d registry create $REGISTRY_NAME --port $REGISTRY_PORT
  
  STEP cluster
    CONDITION ! k3d cluster list | grep -w $CLUSTER_NAME
    COMMAND
      k3d cluster create $CLUSTER_NAME \
        --registry-use $REGISTRY_NAME \
        --k3s-arg "--disable=traefik@server:0" \
        --kubeconfig-update-default=false \
        -p "80:80@loadbalancer" \
        --wait
  
  STEP kubeconfig
    COMMAND
      mkdir -p .scratch \
        && k3d kubeconfig get $CLUSTER_NAME > .scratch/kubeconfig \
        && KUBECONFIG=.scratch/kubeconfig kubectl config use-context k3d-$CLUSTER_NAME

ARTEFACT stop
  STEP cluster
    CONDITION k3d cluster list | grep -w $CLUSTER_NAME
    COMMAND
      k3d cluster delete $CLUSTER_NAME || true
    
  STEP registry
    CONDITION k3d registry list | grep -w k3d-$REGISTRY_NAME
    COMMAND k3d registry delete $REGISTRY_NAME
  
  STEP scratch
    CONDITION [[ -f .scratch/kubeconfig ]]
    COMMAND rm .scratch/kubeconfig