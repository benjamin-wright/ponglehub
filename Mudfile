ENV DEV_CLUSTER=pongle-dev
ENV CLUSTER_NAME=pongle
ENV REGISTRY_NAME=pongle-registry.localhost
ENV REGISTRY_PORT=5000
ENV NPM_CONTAINER=pongle-npm
ENV NPM_PORT=4873
ENV NPM_USERNAME=admin
ENV NPM_PASSWORD=djsafnAJFNsaFNJSADNfkjsA

ARTEFACT generate
  STEP istio
    CONDITION
      [[ ! -f infra/manifests/generated/crd-operator.yaml ]]
      [[ ! -f infra/manifests/generated/istio-operator.yaml ]]
    COMMAND
      mkdir -p infra/manifests/generated
      curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.10.1 sh -
      helm template istio-operator ./istio-1.10.1/manifests/charts/istio-operator --namespace istio-operator > infra/manifests/generated/istio-operator.yaml
      cp ./istio-1.10.1/manifests/charts/istio-operator/crds/* infra/manifests/generated/
      rm -rf istio-1.10.1

  STEP knative
    CONDITION
      [[ ! -f infra/manifests/generated/knative-net-istio.yaml ]]
      [[ ! -f infra/manifests/generated/knative-serving-core.yaml ]]
      [[ ! -f infra/manifests/generated/knative-serving-crds.yaml ]]
    COMMAND
      curl -L https://github.com/knative/serving/releases/download/v0.22.0/serving-crds.yaml -o infra/manifests/generated/knative-serving-crds.yaml
      curl -L https://github.com/knative/serving/releases/download/v0.22.0/serving-core.yaml -o infra/manifests/generated/knative-serving-core.yaml
      curl -L https://github.com/knative/net-istio/releases/download/v0.22.0/net-istio.yaml -o infra/manifests/generated/knative-net-istio.yaml
      yq eval-all --inplace \
        '. |= (select(.kind=="Service" and .metadata.name=="knative-local-gateway") | .metadata.labels["experimental.istio.io/disable-gateway-port-translation"]="true")' \
        infra/manifests/generated/knative-net-istio.yaml

ARTEFACT start
  DEPENDS ON +generate
  
  STEP registry
    CONDITION ! k3d registry list | grep -w k3d-$REGISTRY_NAME 
    COMMAND k3d registry create $REGISTRY_NAME --port $REGISTRY_PORT
  
  STEP cluster
    CONDITION ! k3d cluster list | grep -w $CLUSTER_NAME
    COMMAND
      k3d cluster create $CLUSTER_NAME \
        --registry-use $REGISTRY_NAME \
        --k3s-server-arg "--no-deploy=traefik" \
        --kubeconfig-update-default=false \
        --volume $(pwd)/infra/manifests:/var/lib/rancher/k3s/server/manifests/preload \
        -p "80:80@loadbalancer" \
        --wait
  
  STEP kubeconfig
    COMMAND
      mkdir -p .scratch
      k3d kubeconfig get $CLUSTER_NAME > .scratch/kubeconfig

ARTEFACT clean
  STEP remove-manifests
    COMMAND rm -rf infra/manifests/generated

ARTEFACT stop
  STEP cluster
    CONDITION k3d cluster list | grep -w $CLUSTER_NAME
    COMMAND
      k3d cluster delete $CLUSTER_NAME || true
    
  STEP registry
    CONDITION k3d registry list | grep -w k3d-$REGISTRY_NAME
    COMMAND k3d registry delete $REGISTRY_NAME

ARTEFACT npm
  CONDITION ! docker ps --format '{{ .Names }}' | grep -q $NPM_CONTAINER
  
  STEP deploy
    COMMAND docker run -d --restart always -p $NPM_PORT:4873 --name $NPM_CONTAINER verdaccio/verdaccio:4 2>&1

  STEP login
    WAIT FOR npm ping --registry http://localhost:$NPM_PORT
    COMMAND
      TOKEN=$(curl -s \
        -H "Accept: application/json" \
        -H "Content-Type:application/json" \
        -X PUT --data "{\"name\": \"$NPM_USERNAME\", \"password\": \"$NPM_PASSWORD\"}" \
        http://localhost:$NPM_PORT/-/user/org.couchdb.user:$NPM_USERNAME 2>&1 | jq '.token' -r)
      
      if [[ "$TOKEN" == "null" ]]; then
        echo "failed to get npm token, try restarting"
        exit 1
      fi

      npm set @pongle:registry "http://localhost:$NPM_PORT"
      npm set //localhost:$NPM_PORT/:_authToken $TOKEN

ARTEFACT npm-stop
  CONDITION docker ps --format '{{ .Names }}' | grep -q $NPM_CONTAINER
  
  STEP stop-container
    COMMAND docker stop $NPM_CONTAINER 2>&1
  
  STEP remove-container
    COMMAND docker rm $NPM_CONTAINER 2>&1
  
  STEP clear-npmrc
    COMMAND
      npm config delete @pongle:registry
      npm config delete //localhost:$NPM_PORT/:_authToken
  
  STEP clear-docker
    COMMAND docker system prune --all --volumes --force

  STEP clear-checksums
    COMMAND find . -name '.last-checksum' -delete

ARTEFACT dev
  CONDITION ! k3d cluster list | grep -w $DEV_CLUSTER
  
  STEP start-cluster
    COMMAND
      k3d cluster create $DEV_CLUSTER \
      --registry-create \
      --k3s-server-arg "--no-deploy=traefik" \
      --kubeconfig-update-default=false \
      -p "80:80@loadbalancer" \
      --wait
  
  STEP kubeconfig
    COMMAND
      mkdir -p .scratch \
        && k3d kubeconfig get $DEV_CLUSTER > .scratch/dev-kubeconfig \
        && KUBECONFIG=.scratch/dev-kubeconfig kubectl config use-context k3d-$DEV_CLUSTER

ARTEFACT dev-stop
  CONDITION k3d cluster list | grep -w $DEV_CLUSTER
  STEP stop
    COMMAND
      k3d cluster delete $DEV_CLUSTER \
        && rm .scratch/dev-kubeconfig
