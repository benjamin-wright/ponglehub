{{- $root := . }}
{{- range $name, $server := .Values.servers }}
{{- if $server.db }}
---
apiVersion: ponglehub.co.uk/v1alpha1
kind: CockroachClient
metadata:
  name: {{ $name }}
  namespace: {{ $root.Release.Namespace }}
spec:
  deployment: {{ $server.db.cluster }}
  database: {{ $server.db.database }}
  username: {{ $server.db.username }}
{{- end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $name }}
  namespace: {{ $root.Release.Namespace }}
automountServiceAccountToken: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ required "must enter a name property!" $name }}
  name: {{ required "must enter a name property!" $name }}
  namespace: {{ $root.Release.Namespace }}
spec:
  replicas: {{ $server.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ $name }}
  template:
    metadata:
      labels:
        app: {{ required "must enter a name property!" $name }}
      {{- if $server.annotations }}
      annotations:
      {{- range $key, $value := $server.annotations }}
        {{ $key }}: {{ $value }}
      {{- end }}
      {{- end }}
    spec:
      serviceAccountName: {{ $name }}
      {{- if $server.initContainers }}
      initContainers:
      {{- range $key, $container := $server.initContainers }}
      - name: {{ $container.name }}
        image: {{ required "must enter an image property!" $container.image}}
        imagePullPolicy: {{ $container.pullPolicy | default "Always" }}
        {{- if $container.env }}
        env:
        {{- range $name, $value := $container.env }}
        - name: {{ $name }}
          value: {{ tpl $value $root }}
        {{- end }}
        {{- end }}
        resources:
        {{- if $server.resources }}
          {{- toYaml $server.resources | nindent 10 }}
        {{- else }}
          requests:
            memory: 32Mi
            cpu: 0.1
          limits:
            memory: 32Mi
            cpu: 0.1
        {{- end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      {{- end }}
      {{- end }}
      containers:
      - name: server
        image: {{ required "must enter an image property!" $server.image}}
        imagePullPolicy: {{ $server.pullPolicy | default "Always" }}
        {{- if $server.command }}
        command:
          {{- range $server.command }}
        - {{ . }}
          {{- end }}
        {{- end }}
        {{- if $server.args }}
        args:
          {{- range $server.args }}
        - {{ . | quote }}
          {{- end }}
        {{- end }}
        {{- if (or $server.env $server.db) }}
        env:
        {{- end }}
        {{- if $server.env }}
        {{- range $key, $value := $server.env }}
        - name: {{ $key }}
          value: {{ tpl $value $root }}
        {{- end }}
        {{- end }}
        {{- if $server.db }}
        - name: POSTGRES_HOST
          value: {{ $server.db.cluster }}
        - name: POSTGRES_PORT
          value: "26257"
        - name: POSTGRES_USER
          value: {{ $server.db.username }}
        - name: POSTGRES_NAME
          value: {{ $server.db.database }}
        {{- end }}
        {{- if $server.volFromSecret }}
        volumeMounts:
        {{- range $name, $secret := $server.volFromSecret }}
        - name: {{ $name }}
          mountPath: {{ $secret.path }}
          readOnly: true
        {{- end }}
        {{- end }}
        resources:
        {{- if $server.resources }}
          {{- toYaml $server.resources | nindent 10 }}
        {{- else }}
          requests:
            memory: 32Mi
            cpu: 0.1
          limits:
            memory: 32Mi
            cpu: 0.1
        {{- end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      {{- if $server.volFromSecret }}
      volumes:
      {{- range $name, $secret := $server.volFromSecret }}
      - name: {{ $name }}
        secret:
          secretName: {{ $name }}
      {{- end }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {{ $name }}
  name: {{ $name }}
  namespace: {{ $root.Release.Namespace }}
spec:
  ports:
  {{- if $server.ports }}
  {{- range $_, $port := $server.ports }}
  - name: {{ $port | quote }}
    port: {{ $port }}
    protocol: TCP
    targetPort: {{ $port }}
  {{- end }}
  {{- else }}
  - name: http
    port: 80
    protocol: TCP
    targetPort: {{ $server.port | default 80 }}
  {{- end }}
  selector:
    app: {{ $name }}
  type: ClusterIP
{{- if not (empty $server.rbac) }}
{{- if $server.rbac.clusterWide }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ $name }}
rules:
- apiGroups:
  {{- range $server.rbac.apiGroups }}
  - {{ . }}
  {{- end }}
  resources:
  {{- range $server.rbac.resources }}
  - {{ . }}
  {{- end }}
  verbs:
  {{- range $server.rbac.verbs }}
  - {{ . }}
  {{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ $name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ $name }}
subjects:
- kind: ServiceAccount
  name: {{ $name }}
  namespace: {{ $root.Release.Namespace }}
{{- else }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ $name }}
  namespace: {{ $root.Release.Namespace }}
rules:
- apiGroups:
  {{- range $server.rbac.apiGroups }}
  - {{ . }}
  {{- end }}
  resources:
  {{- range $server.rbac.resources }}
  - {{ . }}
  {{- end }}
  verbs:
  {{- range $server.rbac.verbs }}
  - {{ . }}
  {{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ $name }}
  namespace: {{ $root.Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ $name }}
subjects:
- kind: ServiceAccount
  name: {{ $name }}
  namespace: {{ $root.Release.Namespace }}
{{- end }}
{{- end }}
{{- end }}

{{- $hosts := list }}
{{- range $name, $server := .Values.servers }}

{{- if not (empty $server.host) }}
{{- $hosts = append $hosts (dict "host" $server.host "stripPrefix" $server.stripPrefix "path" $server.path "priority" $server.priority "service" $name ) }}
{{- end }}

{{- if $server.stripPrefix }}
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: {{ $name }}
spec:
  stripPrefix:
    prefixes:
      - {{ $server.path }}
{{- end }}
{{- end }}

{{- if (gt (len $hosts) 0) }}
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: {{ $root.Release.Name }}
spec:
  routes:
  {{ range $host := $hosts }}
  - kind: Rule
    {{- if $host.path }}
    match: "Host(`{{ $host.host }}`) && PathPrefix(`{{ $host.path }}`)"
    {{- else }}
    match: "Host(`{{ $host.host }}`)"
    {{- end }}
    {{- if $host.stripPrefix }}
    middlewares:
    - name: {{ $host.service }}
    {{- end }}
    {{- if $host.priority }}
    priority: {{ $host.priority }}
    {{- end }}
    services:
    - kind: Service
      name: {{ $host.service }}
      namespace: {{ $root.Release.Namespace }}
      passHostHeader: true
      port: 80
      responseForwarding:
        flushInterval: 1ms
      scheme: http
      strategy: RoundRobin
  {{- end }}
{{- end }}